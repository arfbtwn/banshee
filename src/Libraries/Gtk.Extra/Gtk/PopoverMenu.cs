// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class PopoverMenu : Gtk.Popover {

		public PopoverMenu (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_popover_menu_new();

		public PopoverMenu () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PopoverMenu)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_popover_menu_new();
		}

		[GLib.Property ("visible-submenu")]
		public string VisibleSubmenu {
			get {
				GLib.Value val = GetProperty ("visible-submenu");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("visible-submenu", val);
				val.Dispose ();
			}
		}

		public class PopoverMenuChild : Gtk.Container.ContainerChild {
			protected internal PopoverMenuChild (Gtk.Container parent, Gtk.Widget child) : base (parent, child) {}

			[Gtk.ChildProperty ("submenu")]
			public string Submenu {
				get {
					GLib.Value val = parent.ChildGetProperty (child, "submenu");
					string ret = (string) val;
					val.Dispose ();
					return ret;
				}
				set {
					GLib.Value val = new GLib.Value(value);
					parent.ChildSetProperty(child, "submenu", val);
					val.Dispose ();
				}
			}

			[Gtk.ChildProperty ("position")]
			public int Position {
				get {
					GLib.Value val = parent.ChildGetProperty (child, "position");
					int ret = (int) val;
					val.Dispose ();
					return ret;
				}
				set {
					GLib.Value val = new GLib.Value(value);
					parent.ChildSetProperty(child, "position", val);
					val.Dispose ();
				}
			}

		}

		public override Gtk.Container.ContainerChild this [Gtk.Widget child] {
			get {
				return new PopoverMenuChild (this, child);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkPopoverMenuClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public IntPtr[] Reserved;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Popover)).GetClassSize ();
		static Dictionary<GLib.GType, GtkPopoverMenuClass> class_structs;

		static GtkPopoverMenuClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkPopoverMenuClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkPopoverMenuClass class_struct = (GtkPopoverMenuClass) Marshal.PtrToStructure (class_ptr, typeof (GtkPopoverMenuClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkPopoverMenuClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_popover_menu_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_popover_menu_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_popover_menu_open_submenu(IntPtr raw, IntPtr name);

		public void OpenSubmenu(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gtk_popover_menu_open_submenu(Handle, native_name);
			GLib.Marshaller.Free (native_name);
		}

#endregion
	}
}
