// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Popover : Gtk.Bin {

		public Popover (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_popover_new(IntPtr relative_to);

		public Popover (Gtk.Widget relative_to) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Popover)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = gtk_popover_new(relative_to == null ? IntPtr.Zero : relative_to.Handle);
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_popover_new_from_model(IntPtr relative_to, IntPtr model);

		public Popover (Gtk.Widget relative_to, GLib.MenuModel model) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Popover)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = gtk_popover_new_from_model(relative_to == null ? IntPtr.Zero : relative_to.Handle, model == null ? IntPtr.Zero : model.Handle);
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_popover_get_constrain_to(IntPtr raw);

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_popover_set_constrain_to(IntPtr raw, int constraint);

		[GLib.Property ("constrain-to")]
		public Gtk.PopoverConstraint ConstrainTo {
			get  {
				int raw_ret = gtk_popover_get_constrain_to(Handle);
				Gtk.PopoverConstraint ret = (Gtk.PopoverConstraint) raw_ret;
				return ret;
			}
			set  {
				gtk_popover_set_constrain_to(Handle, (int) value);
			}
		}

		[GLib.Signal("closed")]
		public event System.EventHandler Closed {
			add {
				this.AddSignalHandler ("closed", value);
			}
			remove {
				this.RemoveSignalHandler ("closed", value);
			}
		}

		static ClosedNativeDelegate Closed_cb_delegate;
		static ClosedNativeDelegate ClosedVMCallback {
			get {
				if (Closed_cb_delegate == null)
					Closed_cb_delegate = new ClosedNativeDelegate (Closed_cb);
				return Closed_cb_delegate;
			}
		}

		static void OverrideClosed (GLib.GType gtype)
		{
			OverrideClosed (gtype, ClosedVMCallback);
		}

		static void OverrideClosed (GLib.GType gtype, ClosedNativeDelegate callback)
		{
			GtkPopoverClass class_iface = GetClassStruct (gtype, false);
			class_iface.Closed = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClosedNativeDelegate (IntPtr inst);

		static void Closed_cb (IntPtr inst)
		{
			try {
				Popover __obj = GLib.Object.GetObject (inst, false) as Popover;
				__obj.OnClosed ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Popover), ConnectionMethod="OverrideClosed")]
		protected virtual void OnClosed ()
		{
			InternalClosed ();
		}

		private void InternalClosed ()
		{
			ClosedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Closed;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkPopoverClass {
			public ClosedNativeDelegate Closed;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public IntPtr[] Reserved;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Bin)).GetClassSize ();
		static Dictionary<GLib.GType, GtkPopoverClass> class_structs;

		static GtkPopoverClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkPopoverClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkPopoverClass class_struct = (GtkPopoverClass) Marshal.PtrToStructure (class_ptr, typeof (GtkPopoverClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkPopoverClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_popover_bind_model(IntPtr raw, IntPtr model, IntPtr action_namespace);

		public void BindModel(GLib.MenuModel model, string action_namespace) {
			IntPtr native_action_namespace = GLib.Marshaller.StringToPtrGStrdup (action_namespace);
			gtk_popover_bind_model(Handle, model == null ? IntPtr.Zero : model.Handle, native_action_namespace);
			GLib.Marshaller.Free (native_action_namespace);
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_popover_get_default_widget(IntPtr raw);

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_popover_set_default_widget(IntPtr raw, IntPtr widget);

		public Gtk.Widget DefaultWidget { 
			get {
				IntPtr raw_ret = gtk_popover_get_default_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set {
				gtk_popover_set_default_widget(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_popover_get_modal(IntPtr raw);

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_popover_set_modal(IntPtr raw, bool modal);

		public bool Modal { 
			get {
				bool raw_ret = gtk_popover_get_modal(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_popover_set_modal(Handle, value);
			}
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_popover_get_pointing_to(IntPtr raw, IntPtr rect);

		public bool GetPointingTo(Gdk.Rectangle rect) {
			IntPtr native_rect = GLib.Marshaller.StructureToPtrAlloc (rect);
			bool raw_ret = gtk_popover_get_pointing_to(Handle, native_rect);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_rect);
			return ret;
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_popover_get_position(IntPtr raw);

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_popover_set_position(IntPtr raw, int position);

		public Gtk.PositionType Position { 
			get {
				int raw_ret = gtk_popover_get_position(Handle);
				Gtk.PositionType ret = (Gtk.PositionType) raw_ret;
				return ret;
			}
			set {
				gtk_popover_set_position(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_popover_get_relative_to(IntPtr raw);

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_popover_set_relative_to(IntPtr raw, IntPtr relative_to);

		public Gtk.Widget RelativeTo { 
			get {
				IntPtr raw_ret = gtk_popover_get_relative_to(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set {
				gtk_popover_set_relative_to(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_popover_get_transitions_enabled(IntPtr raw);

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_popover_set_transitions_enabled(IntPtr raw, bool transitions_enabled);

		public bool TransitionsEnabled { 
			get {
				bool raw_ret = gtk_popover_get_transitions_enabled(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_popover_set_transitions_enabled(Handle, value);
			}
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_popover_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_popover_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_popover_set_pointing_to(IntPtr raw, IntPtr rect);

		public void SetPointingTo(Gdk.Rectangle rect) {
			IntPtr native_rect = GLib.Marshaller.StructureToPtrAlloc (rect);
			gtk_popover_set_pointing_to(Handle, native_rect);
			Marshal.FreeHGlobal (native_rect);
		}

#endregion
	}
}
